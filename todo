TODO:

#0: Keep using php mysqli, jquery/ajax for this app.
#0: I will design my own orgchart tech tree using SVG. SVG and canvas are pretty essential skills to know anyway.
#0: Design at least 100 techs for the survival tree. Decide which tasks are unlocked by which techs, and which
techs are unlocked by which tasks. First design the tree, then design the table to be able to work with the tree.
#0: Fix the hit login twice bug, caused by some async issue with javascript I think.
#0: Decide how to implement tech tree to be better in line with my vision.
#0: Add functionality to next task section where it shows you the instructions and sources somehow. Either through hovering mouse, or simply it being below.
#0: Style next task section to be how I want, perhaps like a small border box with the image inside and the instructions/sources and checkmark underneath.
#0: Add functionality to checkmark button so that it pops up with the "how many hours did it take you?" question with the time input box.
#0: Add functionality to the 3 buttons at the top of page to change the content of the page.
#0: Add hit enter key functionality to submit all html forms.
#0: Add resetPassword page and functionality using updateUser() stored procedure.
#0: Add cookies which remember if user logged in within last 24 hours.
#0: Add remember password option (again using cookies). (Maybe not, I'll decide if this is a good idea or not.)
#0: Learn of a method that allows me to use form tags with ajax.
#0: Design good css for all the pages.
#0: Make tech tree titles not include 'Make a' before hand, and make sure everything has correct capitalization.
#0: In this order, Add other tree orders, instructions, sources and supplies required to the full view table.

After I finish entire website, if I want to. I can add these things:
#0: Difficulty column to task table.
#0: Add ability for users to make their own table, and add their own tasks to it.

==================================================

Add this to git file:
How to remove untracked files so the repo is clean just like it was before any changes occured:

First check if any untracked files exist:
git status

now if any exist use this command to erase them:
git clean -df

You can also try 
git reset --hard HEAD  //to undo changes to files.

Now check again if there are any differences between local repo and most recent commit/pull:
git status
Add group_concat to mysql reservedWords and also add more things from practiceMysql page to it as well. It is useful to work with creating a multi-value column in results for some columns that list a value repeatedly. 
see https://stackoverflow.com/questions/4609753/mysql-join-with-multiple-values-in-one-column
==================================================

MYSQL:


MYSQL INSERT INTO DATABASE:
Simple version:

 -> This version will allow the creation of a tech tree with the order of tasks and the level the task is at. (meaning how many tasks are required to complete this one task). 
 -> It also saves the tasks which a user has completed, and what task is next on the list.
 -> It also provides the proven method for getting it done in step-by-step instructions for completing the next task.
 -> It also provides sources where you can learn more about the method used, and see it done for real in articles, youtube videos, images, wiki, etc...

//NOTE: FL means (F)inish (L)ater. I have to look up certain things and go back to them later before I can insert them or if I insert them, so I can update them later.

INSERT INTO user VALUES (0, 'TheGuy','jared gurr',14781234,'something@gmail.com',null,default,default);

INSERT INTO task VALUES (0, 'Make a stone axehead',default,default,default,'TheGuy','Requirement for making stone axe.', 'Find a rough stone that is at least the size of two of your fists put together. Use a river or any other source of water to get the flatest surface of the rock wet. Then use some shaping stone on it, and begin rubbing the shaping stone on the wet rock. Keep rubbing until you get the shape of an axehead you want. ...FL');

INSERT INTO task VALUES (0, 'Make plant cordage',default,default,default,'boss','Used in many things. Very helpful material.','Find a plant of this type or grass, take it in your hand and twist it repeatedly, and add more plant strands as you reach the end repeatedly. Continue until you have the length of cordage you want. double it if you want it thicker, though this will make it shorter too.');

INSERT INTO task VALUES (0, 'Make a stone axe',default,default,'B','boss','To cut and shape wood, including obtaining wood from trees.', 'Grab the stone axehead you made in first task, and use it to hand chop or break off a branch off a tree. The branch should be long enough to make a two handed handle ideally so around the length between both your elbows when arms are stretched to side. Carve a hole in the wood  ...FL');

INSERT INTO supply VALUES (0, 1, 'shaping stone', 'stone',null,'Shaping stone is any type of stone that you can shape using the hand grinding on a wet stone method.', 'Y', 'You can find it by simply taking rocks you find anywhere on the ground, in river, underground etc and test it by rubbing it against a stone with water/sand on it and see if it shapes well. If not, try a different type of rock. Some good rocks for this are shale rocks found in blah places.  ...FL');

INSERT INTO source VALUES (1, 'https://www.youtube.com/watch?v=BN-34JfUrHY','https://www.youtube.com/watch?v=Wvw1xm9Y7nE', null, null, null, null),(2,'https://www.youtube.com/watch?v=ZEl-Y1NvBVI', default, default, default, default),(3,'https://www.youtube.com/watch?v=BN-34JfUrHY', default, default, default, 'source #1 shows how to get plant cordage in middle of video.');

INSERT INTO taskCompletion VALUES (1,1,default); //This means that user boss who has id 1 has finished the first task in the tech tree.

NOTE: The order column is for specifying the order of the tech tree for people who are starting from scratch out in the wilderness (a very rare case).
The cityOrder column is for people who already live in a normal city, and can recycle many useful materials such as wood, plastics, plastic bottles, glass, and metals. Not only that, but if they choose to, they can purchase some extremely useful items which would make a lot of devices way easier or more effective. But I'll only make that table and start filling it once I find something that I believes fits in that category based on what the machines I design need.

TODO: After I finish setting up the database, I will download every single video from the database that I use as a source, because they can often be taken down by the original user or by youtube, so I have to make sure and protect against that, otherwise many people in the future could be absolutely stuck without sources to learn more or for how to follow these instructions more effectively.
TODO: Also after I actually finish developing the app, I'll transfer everything to mariadb - Aria and follow some guides about migrating all tables to aria because my main goal here is to practice with innodb/myisam mysql inside php. I'll practice Mariadb/Aria later. 

So just to be clear. the app will be developed entirely with innodb. Then after I finish making the app before I publish it, I'll change everything to mariadb/aria and then make sure all my tests still work. 


Things I learned so far from this experience:
 -> Text cannot be given a default value.
 -> You can do relationships between tables whether they are innodb or myisam. The only difference is that innodb can use foreign key constraints, but myisam cannot. But neither always needs them.

==================================================
Advanced version:

 -> This version does everything the original version does plus:
 -> It allows you to show alternative methods, supplies and resources for accomplishing a task.
 -> For each method it will show you a list of required/optional materials and required/optional tools, as well as the pros and cons to each method. 
 -> It shows you a list of supplies(materials or tools) with a description, and from which resources you can find them.
 -> It shows you a list of resources with a list of all the possible supplies can be obtained which are part of a method somewhere in the database. (so not a list of all possible resources for all possible supplies. It's simply a list of all the supplies that are possible from a specific resource which is used in this tech tree.)

 This version will be better in every way, but the simple version will be much faster for me to make right now, and later I'll work on getting the improved version built and sent out the door.

Relationships in my advanced table:

normal relations:
1-many user to task
 -> user.username is 1-many with task.user_author 

1-many task to method
 -> task.id is 1-many with method.task_id

1-1 method to source
 -> method.id is 1-1 with source.method_id

Many-to-many relations: 

task to method:
 -> task.id is 1-many with task_method.task_id
 -> method.id is 1-many with task_method.method_id

method to supply:
 -> method.id is 1-many with method_supply.method_id
 -> supply.id is 1-many with method_supply.supply_id

supply to resource:
 -> supply.id is 1-many with supply_resource.supply_id
 -> resource.id is 1-many with supply_resource.resource_id
==================================================
How to insert into this advanced version:

A quarry can provide these supplies:
'shaping stone, rock, clay, sand, dirt, limestone, minerals, ores, gems, water, oil'
So it's important after you add a quarry to add these supplies to the list. and then add the ids to the supply_resource table.
The hand grinding stone method requires shaping stone, river rock and water. So be sure to add those to the supply table and add a resource for them if it doesn't already exist as well. Then connect them using the supply_resource table.

INSERT INTO resource VALUES (0, 'quarry','N');
INSERT INTO resource VALUES (0, 'river','Y');

INSERT INTO supply VALUES (0,'shaping stone','stone',null,'This is any stone which you can shape by hand through knapping or some other method.','Y');
INSERT INTO supply VALUES (0, 'rock','stone',null,'Any type of rock, it doesn't matter','Y');
INSERT INTO supply VALUES (0, 'clay','dirt',null,'The finest grain of soil/dirt which is mixed with water and grog, sand or straw etc and used for building and shaping into containers/bowls and other things. It is made waterproof by heating it inside a kiln.','Y');
INSERT INTO supply VALUES (0, 'sand',null,'grains of sand are bigger than clay particles, but smaller than pebbles, sand is useful for many tasks.'Y');
INSERT INTO supply VALUES (0, 'dirt','dirt',null,'Dirt refers to any soil with a mix of clay, sand, rocks, and oftentimes decomposing plant/animal matter.','Y');
INSERT INTO supply VALUES (0, 'limestone','stone',null,'limestone is a type of rock which is crumbly and yellow-ish white. It is a prime material for making quick lye for cement making.','N');
INSERT INTO supply VALUES (0, 'river rock','stone',null,'river rock is a smooth stone found in rivers or dry riverbeds.','Y');
INSERT INTO supply VALUES (0, 'water','water',null,default,'Y');


INSERT INTO method VALUES (0,'hand grinding stone','Requires no tools','Requires a source of shaping stone','Take a proper sized shaping rock and grind it on a good sized river rock with water on it. You need to use water because it will prevent dust getting into your lungs. Keep grinding the faces of the shaping stone until you get the shape you want.',1), (0,';

INSERT INTO source VALUES (1, 'something.com', '/path/to/something');

INSERT INTO supply_resource VALUES (1, 1, 'N'),(2, 1, 'N'),(3, 1, 'N'),(4, 1, 'N'),(5, 1, 'N'),(6, 1, 'N'),(7, 2, 'N'),(8, 2, 'Y');

INSERT INTO method_supply VALUES (1, 1, 'Y',default),(1,7,'Y','tool'),(1,9,'Y','tool');
//Don't forget you can add optional materials here if any exist.

INSERT INTO task VALUES (0,'Make plant cordage',1), (0,'Make a Stone Axe',3,'B','boss','To obtain wood from trees.');

INSERT INTO task_method VALUES (3,1,'Y'),(3,2,'Y);

==================================================
==================================================

FIX ORDER AFTER INSERT:
Here is how to fix the order of things when I realize something needs to be added before something else:
 -> It's impossible if you set the order based on auto_incrementing int column. You have to use a normal column called 'order' which allows you to order everything yourself, and then you can update it all at once with a single command.

Here is an example:

task:
order_no
description
rank
user_author
purpose
method_ids

Add new task in middle of task table:
INSERT INTO task VALUES (15, 'build a kayak','C','boss','To cross rivers and streams','3 4 6')  

Here is how to do queries for this sort of thing: 
SELECT * FROM task WHERE method_ids LIKE '%4%';

Here is how to do joins for this sort of thing: 
SELECT * FROM task INNER JOIN method ON (method_ids LIKE '%' + id + '%'); //I still have to test this and see if it works.

//ask mentor about how to do relation for multiple methods in task, and how to do table joins on something like this.) I guess you could just do it manually, but yeah I don't see how to do table joins, and also if I needed to use foreign key for some reason, how would you insert multiple foreign key values inside one record of another table? 
For example I have to insert multiple method ids into one single task row.

Update the values after that task you added:
UPDATE task set order_no = order_no + 1 WHERE order_no >= 15;   //This should update all the order numbers that are 15 or higher so now it's ok if I need to insert a new one in the middle that I didn't know about before. You should try this with a temporary table with auto_increment columns just to see if it works.

MYSQL requirements testing:
1. Updating entire task table when I add or remove something:
UPDATE task set order_no = order_no + 1 WHERE order_no >= 15;

2. Selecting a specific method:
SELECT * FROM method WHERE name = "hand grind stone";

3. selecting a specific task:
SELECT * FROM task WHERE description = "Make a Stone Axe";

4. selecting a list of methods based on completed requirements:
SELECT * FROM method WHERE required_mat = 'shaping stone' OR required_tools = 'water' OR 'required_tools = 'river rock';

5. selecting a list of tasks based on completed methods:
SELECT * FROM task WHERE method_ids = ANY (SELECT id FROM method WHERE name = 'hand grind stone');

6. selecting a task, method, supply and resource all at once which leads to requirements being satisfied for next task:
SELECT * FROM task WHERE order = 100;
//obtain the method ids for current task.

SELECT * FROM method WHERE id = ANY (SELECT method_ids FROM task WHERE order = 100);
//obtain method ids for current task and use that to find out what methods need to be done.
or if you know the method ids already:
SELECT * FROM method WHERE id = 1 OR id = 3 OR id = 5;

SELECT * FROM supply WHERE name = ANY (SELECT required_mat, required_tools, optional_mat, optional_tools FROM method WHERE id = ANY (SELECT method_ids FROM task WHERE order = 100));
//Find out the supplies required by the methods which are required to accomplish the task, as well as optional supplies.
or if you know the supplies required already:
SELECT * FROM supply WHERE name = 'shaping stone' OR name = 'water' OR name = 'river rock';
NOTE: This is optional since looking up the supplies is only required if you want a explanation about what a material is and what it does. you can skip to the resources section.

SELECT * FROM resource WHERE supplies_provided LIKE '%river rock%' OR supplies_provided LIKE '%shaping stone%' OR supplies_provided LIKE '%water%';
//Find out what resources can be used to obtain certain supply materials/tools. For example a beehive provides wax, honey and royal jelly.
NOTE: This is the required way to search for something that is in a list format in mysql. Since It's like a one to many-many relationship.

7. selecting a next task based on what resources I already have which may or may not be all the required ones:
SELECT * FROM task WHERE method_ids = ANY (SELECT id FROM method WHERE required_mat = ANY (SELECT name FROM supply WHERE name = ANY (SELECT supplies_provided FROM resource WHERE name = 'beehive')) AND required_tools = ANY (SELECT name FROM supply WHERE name = ANY (SELECT supplies_provided FROM resource WHERE name = 'beehive')));

8. selecting a next task based on what supplies I already have which may or may not be all the required ones:
SELECT * FROM task WHERE method_ids = ANY (SELECT id FROM method WHERE required_mat = ANY (SELECT name FROM supply WHERE name = 'shaping stone' AND name = 'river rock' AND name = 'water') AND required_tools = ANY (SELECT name FROM supply WHERE name = 'shaping stone' AND name = 'river rock' AND name = 'water'));

9. selecting a next task based on what methods I already have which may or may not be all the required ones:
SELECT * FROM task WHERE method_ids = ANY (SELECT id FROM method WHERE required_mat = 'shaping stone' AND required_tools = 'river rock');

10. selecting a next task based on what tasks I've already completed which may or may not be all the required ones:
SELECT * FROM task WHERE order = 100 + 1;

11. select a list of tasks after the last task I completed:
SELECT * FROM task WHERE order > 100;

12. select all the required tools/materials and optional tools/materials of a specific method:
SELECT required_tools, required mat, optional_tools, optional_mat FROM method WHERE id = 100;

13. select all the resources which provide a specific supply:
SELECT name FROM resource WHERE supplies_provided LIKE '%beeswax%';
NOTE: Perhaps you can make supplies_provided a fulltext index for fulltext searching. I'll try that and see how it changes things.

14. select a list of all the supplies that exist.
SELECT name FROM supply;

15. updating method and source table after deleting two records and inserting one new one.
DELETE FROM method WHERE id = 101 AND id = 102;    //There should be a trigger set up to automatically delete the sources attached to these id's. If not then use this command right after:
DELETE FROM source WHERE method_id = 101 AND method_id = 102;

then do:
ALTER TABLE method SET auto_increment = 101;
INSERT INTO method VALUES (...);
INSERT INTO source VALUES (...);

16. Select a method based on a task you need to complete:
SELECT * FROM task INNER JOIN method ON (id = task_id) WHERE description LIKE '%stone axe%';

17. Select a list of methods joined with the supply table so you can see description of each material/tool:
SELECT * FROM method INNER JOIN method_supply ON (id = method_id) INNER JOIN supply on (supply_id = supply.id);

18. Select a list of methods joined with the resource table so you can see which resources will provide each material/tool:
SELECT * FROM method INNER JOIN method_supply ON (id = method_id) INNER JOIN supply ON (supply_id = supply.id) INNER JOIN resource ON (resource_id = resource.id);
//Perhaps this method requires a cross join since the supply table is between these two tables.

19. Get a list of all completed tasks and their date of completion for a specific user.
//simple version:
SELECT * FROM user INNER JOIN taskCompletion ON (id = user_id) INNER JOIN task ON (task_id = task.id);

==================================================


COUCHBASE:
COUCHBASE INSERT INTO DOCUMENT STORE:

tasks document store:
{
	"Make a Stone Axe" : {
		"order_no": 1,
		"rank" : "b",
		"user_author" : "boss",
		"purpose" : "To cut down trees for wood",
		"required method ids" : [0, 3, 5] } }

method document store:
{
	"hand grind stone" : {
		"required material" : "shaping stone",
		"required tool" : [ "river stone", "water"],
		"pros": "requires no manmade tools",
		"cons": "requires locating a source of shaping stone",
		"instructions" : "Take a proper sized shaping rock and grind it on a good sized river rock with water on it. You need to use water to prevent dust getting into your lungs. Keep grinding the faces of the shaping stone until you get the shape you want.",
		"source": "http://ifsaofjsd.com" } }

supplies document store:
{
	"shaping stone": {
		"base material" : "stone",
		"description" : "This is any stone which you can shape by hand through knapping or some other method." } }

resources document store:
{
	"quarry" : {
		"supplies provided" : ["shaping stone", "rock", "clay", "sand", "dirt", "limestone", "minerals", "ores", "gems", "water", "oil"],
		"renewable" : "no",
		"total supplies" : 11 } }


Now I need to figure out, what does inserting, querying, and updating look like with this sort of system in couchbase.

COUCHBASE REQUIREMENTS TESTING:
0. Updating when I add or remove something:
UPDATE methods SET order_no = order_no + 1 WHERE order_no >= 15;

1. Selecting a specific method:
SELECT "shaping stone" FROM method;

2. selecting a specific task:
SELECT "Make a Stone Axe" FROM task;

3. selecting a list of methods based on completed requirements:
SELECT * FROM method WHERE "required material" = "shaping stone";

4. selecting a list of tasks based on completed methods:
SELECT * FROM task WHERE "method_ids" = [0 ,3, 5];

5. selecting a task, method, supply and resource all at once which leads to requirements being satisfied for next task:

SELECT * FROM task WHERE task = "Make a Stone Axe";
//obtain required method ids from task as well as other info to show user.
SELECT * FROM method WHERE id = [0, 3, 5];  
//obtain required supplies for each method as well as other info to show user.
SELECT * FROM supply WHERE supply = "Shaping stone" OR supply = "water" OR supply = "river stone";  
//obtain information about all the supplies required for this task to show user. (not required)
SELECT * FROM resource WHERE "supplies provided" = "shaping stone" OR "supplies provided" = "river rock" OR "supplies provided" = "water"; 
//obtain the list of resources which can be used to obtain the required supplies for this task.


6. selecting a next task based on what supplies I already have which may or may not be all the required ones:

7. selecting a next task based on what tasks I've already completed which may or may not be all the required ones:


